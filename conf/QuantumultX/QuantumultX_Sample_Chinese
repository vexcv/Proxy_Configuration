# Quantumult X 配置示例
#
# 以 ";" 或 "#" 或 "//" 开头的行表示注释。
#
# SS-URI scheme 请参考 https://shadowsocks.org/doc/sip002.html
#
# Quantumult 使用 HEAD 方法向 server_check_url 发送 HTTP 请求来测试代理的状态，结果应该是两个延迟，第一个是与代理服务器的 TCP 握手，第二个是 HTTP 延迟（Quantumult 成功从 server_check_url 收到 HTTP 响应和 Quantumult 开始向 server_check_url 发送 HTTP 请求之间的时间间隔）。闪电图标表示 TCP 快速打开成功。如果 [server_local] 部分或 [server_remote] 部分中的服务器有自己的 server_check_url，则将使用自己的 server_check_url 而不是 [general] 部分中的 server_check_url。
#
# Quantumult 使用 HTTP HEAD 方法对测试网址 server_check_url 进行网页响应性测试（测试结果为通过该节点访问此网页的 HTTP 延迟, 即 HTTP 响应时间与 HTTP 请求发起时间的差值），来确认节点的可用性。
# Quantumult 界面中的延迟测试方式均为网页响应性测试，显示的最终延迟均为通过对应节点访问测试网页的 HTTP 延迟。
# 由于 Trojan 协议为无响应校验协议，使得 HTTP 检测方式即使获得了 HTTP 响应，也不代表节点一定可用。
#
# dns_exclusion_list 包含禁用占位符 IP（198.18.0.0/15）映射机制的域。不在 dns_exclusion_list 中的域启用了占位符 IP 映射机制，并具有所谓的“远程解析”效果。dns_exclusion_list 中域的 DNS 查询可能会或可能不会遵循 [dns] 部分中的设置。
#
# 当杂项设置中的全局选项“增强兼容性”关闭时，将考虑 advanced_compatibility_ssid_list。
#
# udp_whitelist 包含目标 UDP 端口，空表示所有端口都在 udp_whitelist 中。目标端口不在 udp_whitelist 中的 UDP 数据包（通过 Quantumult 隧道接口）将被丢弃，ICMP（端口不可达）消息将被发回。此设置与过滤规则或策略无关，也与代理（服务器）端口无关。

# udp_drop_list 包含目标 UDP 端口，其机制类似于 udp_whitelist 丢弃 UDP 数据包，但不会发回 ICMP 消息。udp_drop_list 只能捕获 udp_whitelist 允许的 UDP 数据包。
#
# Quantumult 不会处理到 excluded_routes 的流量。修改后最好重新启动设备。
#
# 默认情况下（“loopback”），当 DNS 级别拒绝域时，将返回环回 IP 响应，您可以通过将 dns_reject_domain_behavior 设置为“no-error-no-answer”或“nxdomain”或“none”来更改此行为。这会将行为更改为使用 NOERROR NOANSWER 响应进行响应或使用 NXDOMAIN 响应或 none 进行响应以禁用 DNS 级别拒绝功能。如果您将拒绝的域更改为非拒绝的域（通过更改配置、过滤器或策略），则最多可能需要 10 秒才能生效（TTL 10）。
#
# resource_parser_url 示例可在 https://raw.githubusercontent.com/crossutility/Quantumult-X/master/resource-parser.js 中找到

# server_check_timeout 值仅在小于或等于 5000（毫秒）时才会被考虑。此值与检查过程的总持续时间（包括 DNS 查询、TCP 握手、TLS 握手和应用层 HTTP 会话持续时间）进行比较，因此总持续时间可能比“TCP 握手”和“HTTP 会话持续时间”长得多。

[general] # 通用设置
;profile_img_url =http://www.example.com/example.png # 配置文件头像 URL
;resource_parser_url =http://www.example.com/parser.js # 资源解析器 URL
;server_check_url =http://www.google.com/generate_204 # 节点检查 URL
;server_check_user_agent = Agent/1.0 # 节点检查 User-Agent
;server_check_timeout = 5000
;network_check_url =http://bing.com # 网络检查 URL
;doh_user_agent = Agent/1.0 请求的 User-Agent
;geo_location_checker = http://www.example.com/json/, https://www.example.com/script.js # 地理位置检查 URL
;running_mode_trigger = filter, filter, LINK_22E171:all_proxy, LINK_22E172:all_direct # 运行模式触发器
dns_exclusion_list = *.cmpassport.com, *.jegotrip.com.cn, *.icitymobile.mobi, id6.me
;dns_reject_domain_behavior = loopback
;ssid_suspended_list = LINK_22E174, LINK_22E175
;enhanced_compatibility_ssid_list = LINK_22E174, LINK_22E175
;udp_whitelist = 53, 123, 1900, 80-443
;udp_drop_list = 1900, 80
;excluded_routes = 192.168.0.0/16, 172.16.0.0/12, 100.64.0.0/10, 10.0.0.0/8
;icmp_auto_reply = true

#
# 始终使用从当前网络（系统）获取的 DNS 服务器以获得更好的性能（您可以使用“no-system”禁用此功能，但您至少应该添加一个自定义 DNS 服务器，如“server=223.5.5.5”）。
# 设置 no-ipv6 时，Quantumult X Tunnel 的 DNS 模块将直接让 AAAA 查询失败，但仍允许来自 IPv6 DNS 服务器的 A 查询。
# 查询结果将仅用于评估过滤器或通过直接策略连接，当通过服务器连接时，结果将不被使用，Quantumult 永远不会知道相关域的目标 IP。
# 设置 prefer-doh3 时，DoH 查询将尝试通过 HTTP3 进行 DNS，如果失败，则查询连接将回退到 HTTP2。由于 HTTP/2 和 HTTP/3 连接支持多路复用，当您更改此设置时，它可能不会立即生效，但您可以重新连接 Quantumult X Tunnel 或手动更改网络环境以使其立即生效。
# 当设置了 doh-server（DNS over HTTPS）或 doq-server（DNS over QUIC）时，系统和所有其他非加密常规（没有特定域与其绑定）服务器将被忽略。DoQ 的默认端口是 853，如果双方同意为您的 DoQ 使用其他端口（如 456），您可以将其设置为 quic://dns.example.com:456
# 应在一行中配置多个（并发查询）doq-server（s）或 doh-server（s），并且 URL 应以逗号分隔。当同时设置 doq-server（s）和 doh-server（s）时，查询将同时发送到所有服务器。
# 如果 iOS 版本 < iOS 13.0，则最大 doh-server 数量将限制为 1。如果 iOS 版本 < iOS 15.0，则最大 doh-server 数量将限制为 2。
# 特别地，这里不允许直接为域名设置 127.0.0.1。如果您希望某个域名（例如：example.com）为 127.0.0.1，只需将“host, example.com, replies”添加到“filter_local”部分。拒绝操作将向查询返回带有 127.0.0.1 的 DNS 响应。
#
# circumvent-ipv4-answer 和 circumvent-ipv6-answer 与上游 DNS 相关。如果来自上游的 A 或 AAAA 结果（IP）与此字段匹配，则结果将被忽略并标记为失败。如果多个查询发送到不同的上游DNS服务器，并且第一个响应的上游结果与该字段匹配，Quantumult X Tunnel DNS模块将等待其他上游服务器的结果。
# ? 和 * 可以在 circumvent-ipv4-answer 和 circumvent-ipv6-answer 中使用。
# 如果您使用与广告相关的上游DNS，请将 circumvent-ipv4-answer 和 circumvent-ipv6-answer 留空。
#
[dns] # DNS 配置
;circumvent-ipv4-answer = 127.0.0.1, 0.0.0.0 # 绕过的 IPv4 响应
;circumvent-ipv6-answer = :: # 绕过的 IPv6 响应
;prefer-doh3 # 优先使用 DNS-over-HTTP3
;no-system # 禁用系统 DNS
no-ipv6 # 禁用 IPv6
server = 223.5.5.5 # DNS 服务器地址
server = 114.114.114.114
server = 119.29.29.29
server = 8.8.8.8
;doq-server = quic://dns.adguard.com
;doq-server = quic://dns1.example.com, quic://dns2.example.com
;doq-server = quic://dns.adguard.com, excluded_ssids=SSID1
;doq-server = quic://dns.adguard.com, included_ssids=SSID2
;doh-server = https://dns.alidns.com/dns-query
;doh-server = https://exmaple1.com/dns-query, https://exmaple2.com/dns-query
;doh-server = https://223.6.6.6/dns-query, excluded_ssids=SSID1
;doh-server = https://223.5.5.5/dns-query, included_ssids=SSID2
;server = 8.8.8.8:53, excluded_ssids=SSID1
;server = 8.8.4.4:53, included_ssids=SSID2
;server = /example0.com/system
;server = /example1.com/8.8.4.4
;server = /*.example2.com/223.5.5.5
;doh-server = /*.example3.com/https://doh.pub/dns-query, excluded_ssids=SSID2
;doq-server = /*.example4.com/quic://dns.adguard.com, excluded_ssids=SSID3
;server = /example4.com/[2001:4860:4860::8888]:53
;address = /example5.com/192.168.16.18
;address = /example6.com/[2001:8d3:8d3:8d3:8d3:8d3:8d3:8d3]
;alias = /example7.com/another-example.com

#
# 静态策略指向您手动选择的候选服务器。
# 可用策略根据 server_check_url 指向候选服务器中第一个可用的服务器（当策略已触发且策略结果不可用时，将立即启动并发 url 延迟测试。如果当时没有网络请求采用该策略，则意味着策略处于空闲状态，即使服务器关闭也不会启动测试。那时您可以通过手动启动测试来更新服务器状态，但这没有任何意义）。
# 循环策略指向下一个连接的候选服务器。
# dest-hash 策略根据使用目标地址（域或 IP）作为输入的哈希函数指向服务器。此策略对于需要会话持久性的用例特别有用。在策略中添加或删除服务器可能会改变结果。
# url-latency-benchmark 策略指向具有最佳（将考虑参数容忍度 ms）url 延迟结果的服务器。当用户手动启动 Quantumult X 容器应用中的 url 测试时，策略结果也会更新。此类型策略有一个名为 check-interval（秒）的参数，如果此策略已被任何请求激活，则将考虑间隔。如果活动检查为真，则即使策略处于空闲状态，仍将考虑间隔并启动基准测试。
# ssid 策略根据网络环境指向服务器。
# 参数 resource-tag-regex 和 server-tag-regex 仅适用于静态、可用和循环类型的策略。
#
[policy] # 策略配置
;static = policy-name-1, Sample-A, Sample-B, Sample-C, img-url=http://example.com/icon.png # 静态策略指向手动选择的候选服务器。
;available = policy-name-2, Sample-A, Sample-B, Sample-C # 可用策略指向候选中第一个可用服务器，基于 server_check_url 的并发 URL 延迟测试。
;round-robin = policy-name-3, Sample-A, Sample-B, Sample-C # 轮询策略在下一次连接时依次指向候选服务器。
;ssid = policy-name-4, Sample-A, Sample-B, LINK_22E171:Sample-B, LINK_22E172:Sample-C
;static = policy-name-5, resource-tag-regex=^sample, server-tag-regex=^example, img-url=http://example.com/icon.png
;available = policy-name-6, resource-tag-regex=^sample, server-tag-regex=^example
;round-robin = policy-name-7, resource-tag-regex=^sample, server-tag-regex=^example
;dest-hash = policy-name-8, resource-tag-regex=^sample, server-tag-regex=^example # 目的地哈希策略使用目标地址作为输入，适用于需要会话持久性的场景。
;url-latency-benchmark = policy-name-9, resource-tag-regex=^sample, server-tag-regex=^example, check-interval=600, alive-checking=false, tolerance=0 # URL 延迟基准策略选择延迟最小的服务器。

#
# 参数“tag”和“enabled”是可选的。
# 所有类型的远程资源的默认同步间隔为 86400 秒。
# 您可以设置 update-interval=172800 来自定义自动同步间隔（秒），负数表示禁用自动同步。
# 如果设置了 require-devices，则只有当前 Quantumult 设备 ID 属于 require-devices 时才会加载此行配置。Quantumult 设备 ID 可在“设置 - 其他设置 - 关于”中找到。
#
[server_remote] # 远程服务器
;https://raw.githubusercontent.com/crossutility/Quantumult-X/master/server.snippet, tag=Sample-01
;https://raw.githubusercontent.com/crossutility/Quantumult-X/master/server.snippet, opt-parser=true, tag=Sample-01
;https://raw.githubusercontent.com/crossutility/Quantumult-X/master/server.snippet, update-interval=-1, tag=Sample-01
;https://raw.githubusercontent.com/crossutility/Quantumult-X/master/server-complete.snippet, tag=Sample-02, as-policy=static, img-url=http://example.com/icon.png, enabled=false
;https://example.com/server.snippet, tag=Sample-03, img-url=http://example.com/icon.png, require-devices=ID1, ID2, enabled=false

#
# 参数“tag”、“force-policy”和“enabled”是可选的。
# 当存在强制策略时，远程资源过滤器中的策略将被忽略，并使用强制策略。
#
[filter_remote] # 远程过滤器
FILTER_LAN, tag=LAN, force-policy=direct, enabled=true # 本地网络过滤器
FILTER_REGION, tag=CN, force-policy=direct, enabled=true # 中国区域过滤器
;https://raw.githubusercontent.com/crossutility/Quantumult-X/master/filter.snippet, tag=Sample, force-policy=your-policy-name, enabled=true
;https://example.com/filter.snippet, tag=Sample, force-policy=your-policy-name, require-devices=ID1, ID2, enabled=true

#
# 参数“tag”和“enabled”是可选的。
#
[rewrite_remote] # 远程重写规则
;https://raw.githubusercontent.com/crossutility/Quantumult-X/master/sample-import-rewrite.snippet, tag=Sample, enabled=true
;https://example.com/rewrite.snippet, tag=Sample, require-devices=ID1, ID2, enabled=true

#
# 只有 obfs=http、obfs=ws、obfs=wss 可以有可选的“obfs-uri”字段。
# wss 中的 obfs-host 参数将用于 TLS 握手和 HTTP 标头主机字段，如果 wss 未设置 obfs-host，则将使用服务器地址。
# 使用 obfs=ws 和 obfs=wss 时，服务器端可以通过 mux = 0 的 v2ray-plugin 或 v2ray-core 或 trojan-go 部署。
# 值得注意的是，shadowsocks 的 udp-over-tcp 仅由使用 shadowsocksr python 版本部署的服务器支持，其他版本仅支持 UDP 中继本身。如果您要结合使用 shadowsocks 的 udp-relay 和 udp-over-tcp，则必须确保您的服务器使用 shadowsocksr python 版本部署。
# 值得注意的是，obfs=tls 和 obfs=over-tls 是不同的，obfs=tls 是 shadowsocks 项目相关的混淆插件，只是对 TLS 协议的混淆，而 obfs=over-tls 是 TLS 协议，Quantumult X 对 shadowsocks 都支持这两种协议。
# obfs 插件 tls1.2_ticket_auth 比 tls1.2_ticket_fastauth 和 obfs tls 多一个 RTT，建议改用 tls1.2_ticket_fastauth。
# VMess 配置中，chacha20-ietf-poly1305 和 chacha20-poly1305 方法效果相同。
# 用于 SSL 固定的 tls-cert-sha256 或 tls-pubkey-sha256 可由 openssl 使用以下命令生成：
# openssl x509 -noout -fingerprint -sha256 -inform pem -in your-cert.pem
# openssl x509 -inform pem -pubkey -noout < your-cert.pem | openssl pkey -pubin -outform der | openssl dgst -sha256
# 如果 tls-verification 为 false，则将忽略 tls-cert-sha256 和 tls-pubkey-sha256。
# 如果设置了 tls-pubkey-sha256，则将忽略 tls-cert-sha256。
# TLS 的可选 tls-alpn 是 ALPN 扩展内容的十六进制格式，例如：“02:68:32:08:68:74:74:70:2f:31:2e:31”或“02683208687474702f312e31”代表 ALPN“h2”和“http/1.1”（{2, 'h', '2', 8, 'h', 't', 't', 'p', '/', '1', '.', '1'})
# TLS 的 tls-no-session-ticket 参数是可选的，这仅适用于特殊用例。默认情况下，会话票证处于启用状态（tls-no-session-ticket=false）。如果您想禁用会话票证，只需设置 tls-no-session-ticket=true，请记住，如果服务器支持，会话仍可以从会话 ID 中重用新连接。
# TLS 的 tls-no-session-reuse 参数是可选的，这仅适用于特殊用例。默认情况下，会话重用是启用的（tls-no-session-reuse=false）。如果您想禁用会话重用，只需设置 tls-no-session-reuse=true，这将强制 Quantumult X 为每个新连接执行完整的 TLS 握手。
# tls13 参数已被弃用（自 v1.0.26 起弃用），无论您设置什么，TLS 版本 1.3 始终受支持。
# shadowsocks 协议的 obfs=http 遵循 shadowsocks 项目的 simple-obfs 插件。VMess 协议的 obfs=http 遵循 V2Ray 的实现。这两种混淆方式完全不一样，有时候为了配合你特殊的服务器设置（“shadowsocks” + “VMess 的 http 混淆” 或者 “VMess” + “shadowsocks 的 http 混淆”，后者很少发生，前者一般发生在服务器端使用 V2Ray（或类似程序）部署 shadowsocks 协议，且 V2Ray 内置 http 混淆的情况下），shadowsocks 协议可以设置 obfs=vemss-http，vmess 协议可以设置 obfs=shadowsocks-http。
#
[server_local] # 本地服务器
;shadowsocks=example.com:80, method=chacha20, password=pwd, obfs=http, obfs-host=bing.com, obfs-uri=/resource/file, fast-open=false, udp-relay=false, server_check_url=http://www.apple.com/generate_204, tag=ss-obfs-http-01
;shadowsocks=example.com:80, method=chacha20, password=pwd, obfs=http, obfs-host=bing.com, obfs-uri=/resource/file, fast-open=false, udp-relay=false, tag=ss-obfs-http-02
;shadowsocks=example.com:443, method=chacha20, password=pwd, obfs=tls, obfs-host=bing.com, fast-open=false, udp-relay=false, tag=ss-obfs-tls-01
;shadowsocks=example.com:443, method=chacha20, password=pwd, obfs=over-tls, obfs-host=bing.com, tls-verification=true, tls-cert-sha256=b0088370d6c8e02d6e38c443abf81be2aaf1e18f00435aaf0b39852c338f7aaa, fast-open=false, udp-relay=false, tag=ss-tls-01
;shadowsocks=example.com:443, method=chacha20, password=pwd, obfs=over-tls, obfs-host=bing.com, tls-verification=true, tls-pubkey-sha256=eb5ec6684564fd0d04975903ed75342d1b9fdc2096ea54b4cf8caf4740f4ae25, fast-open=false, udp-relay=false, tag=ss-tls-02
;shadowsocks=example.com:443, method=chacha20, password=pwd, obfs=over-tls, obfs-host=bing.com, tls-verification=true, tls-pubkey-sha256=eb5ec6684564fd0d04975903ed75342d1b9fdc2096ea54b4cf8caf4740f4ae25, tls-alpn=02683208687474702f312e31, fast-open=false, udp-relay=false, tag=ss-tls-03
;shadowsocks=example.com:443, method=chacha20, password=pwd, ssr-protocol=auth_chain_b, ssr-protocol-param=def, obfs=tls1.2_ticket_fastauth, obfs-host=bing.com, tag=ssr
;shadowsocks=example.com:80, method=aes-128-gcm, password=pwd, obfs=ws, fast-open=false, udp-relay=false, tag=ss-ws-01
;shadowsocks=example.com:80, method=aes-128-gcm, password=pwd, obfs=ws, obfs-uri=/ws, fast-open=false, udp-relay=false, tag=ss-ws-02
;shadowsocks=example.com:443, method=aes-128-gcm, password=pwd, obfs=wss, obfs-uri=/ws, fast-open=false, udp-relay=false, tag=ss-ws-tls-01
;shadowsocks=example.com:443, method=aes-128-gcm, password=pwd, obfs=wss, obfs-uri=/ws, tls13=true, fast-open=false, udp-relay=false, tag=ss-ws-tls-02
;shadowsocks=example.com:80, method=chacha20, password=pwd, fast-open=false, udp-relay=true, udp-over-tcp=true, tag=ss-udp-over-tcp
#
# 禁用 vmess 的 aead 头，只需设置 aead=false，默认值为 true。如果你的服务器（V2Ray）版本低于 v4.28，请设置 aead=false
;vmess=example.com:80, method=none, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, fast-open=false, udp-relay=false, tag=vmess-01
;vmess=example.com:80, method=aes-128-gcm, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, fast-open=false, udp-relay=false, aead=false, tag=vmess-02
;vmess=example.com:443, method=none, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs=over-tls, fast-open=false, udp-relay=false, tag=vmess-tls-01
;vmess=example.com:80, method=chacha20-poly1305, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs=http, obfs-host=bing.com, obfs-uri=/resource/file, fast-open=false, udp-relay=false, server_check_url=http://www.apple.com/generate_204, tag=vmess-http
;vmess=192.168.1.1:443, method=none, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs=over-tls, obfs-host=example.com, fast-open=false, udp-relay=false, tag=vmess-tls-02
;vmess=192.168.1.1:443, method=none, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs=over-tls, obfs-host=example.com, tls13=true, fast-open=false, udp-relay=false, tag=vmess-tls-03
;vmess=example.com:80, method=chacha20-poly1305, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs=ws, obfs-uri=/ws, fast-open=false, udp-relay=false, tag=vmess-ws-01
;vmess=192.168.1.1:80, method=chacha20-poly1305, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs=ws, obfs-host=example.com, obfs-uri=/ws, fast-open=false, udp-relay=false, tag=vmess-ws-02
;vmess=example.com:443, method=chacha20-poly1305, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs=wss, obfs-uri=/ws, fast-open=false, udp-relay=false, tag=vmess-ws-tls-01
;vmess=192.168.1.1:443, method=chacha20-poly1305, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs=wss, obfs-host=example.com, obfs-uri=/ws, fast-open=false, udp-relay=false, tag=vmess-ws-tls-02
;vmess=192.168.1.1:443, method=chacha20-poly1305, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs=wss, obfs-host=example.com, obfs-uri=/ws, tls13=true, fast-open=false, udp-relay=false, tag=vmess-ws-tls-03
#
# vless 的方法字段应该为无。
;vless=example.com:80, method=none, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, fast-open=false, udp-relay=false, tag=vless-01
;vless=example.com:443, method=none, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs=over-tls, fast-open=false, udp-relay=false, tag=vless-tls-01
;vless=example.com:80, method=none, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs=http, obfs-host=bing.com, obfs-uri=/resource/file, fast-open=false, udp-relay=false, server_check_url=http://www.apple.com/generate_204, tag=vless-http
;vless=192.168.1.1:443, method=none, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs=over-tls, obfs-host=example.com, fast-open=false, udp-relay=false, tag=vless-tls-02
;vless=192.168.1.1:443, method=none, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs=over-tls, obfs-host=example.com, tls13=true, fast-open=false, udp-relay=false, tag=vless-tls-03
;vless=example.com:80, method=none, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs=ws, obfs-uri=/ws, fast-open=false, udp-relay=false, tag=vless-ws-01
;vless=192.168.1.1:80, method=none, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs=ws, obfs-host=example.com, obfs-uri=/ws, fast-open=false, udp-relay=false, tag=vless-ws-02
;vless=example.com:443, method=none, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs=wss, obfs-uri=/ws, fast-open=false, udp-relay=false, tag=vless-ws-tls-01
;vless=192.168.1.1:443, method=none, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs=wss, obfs-host=example.com, obfs-uri=/ws, fast-open=false, udp-relay=false, tag=vless-ws-tls-02
;vless=192.168.1.1:443, method=none, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs=wss, obfs-host=example.com, obfs-uri=/ws, tls13=true, fast-open=false, udp-relay=false, tag=vless-ws-tls-03
#
# http 不支持 obfs 字段
;http=example.com:80,fast-open=false, udp-relay=false, tag=http-01
;http=example.com:80, username=name, password=pwd, fast-open=false, udp-relay=false, tag=http-02
;http=example.com:443, username=name, password=pwd, over-tls=true, tls-host=example.com, tls-verification=true, fast-open=false, udp-relay=false, tag=http-tls-01
;http=example.com:443, username=name, password=pwd, over-tls=true, tls-host=example.com, tls-verification=true, tls-pubkey-sha256=eb5ec6684564fd0d04975903ed75342d1b9fdc2096ea54b4cf8caf4740f4ae25, fast-open=false, udp-relay=false, tag=http-tls-02
;http=example.com:443, username=name, password=pwd, over-tls=true, tls-host=example.com, tls-verification=true, tls-pubkey-sha256=eb5ec6684564fd0d04975903ed75342d1b9fdc2096ea54b4cf8caf4740f4ae25, tls-alpn=02683208687474702f312e31, fast-open=false, udp-relay=false, tag=http-tls-03
#
;socks5=example.com:80,fast-open=false, udp-relay=false, tag=socks5-01
;socks5=example.com:80, username=name, password=pwd, fast-open=false, udp-relay=false, tag=socks5-02
;socks5=example.com:443, username=name, password=pwd, over-tls=true, tls-host=example.com, tls-verification=true, fast-open=false, udp-relay=false, tag=socks5-tls-01
;socks5=example.com:443, username=name, password=pwd, over-tls=true, tls-host=example.com, tls-verification=true, tls-pubkey-sha256=eb5ec6684564fd0d04975903ed75342d1b9fdc2096ea54b4cf8caf4740f4ae25, fast-open=false, udp-relay=false, tag=socks5-tls-02
;socks5=example.com:443, username=name, password=pwd, over-tls=true, tls-host=example.com, tls-verification=true, tls-pubkey-sha256=eb5ec6684564fd0d04975903ed75342d1b9fdc2096ea54b4cf8caf4740f4ae25, tls-alpn=02683208687474702f312e31, fast-open=false, udp-relay=false, tag=socks5-tls-03
#
# obfs 字段仅支持 trojan 的 tls 上的 websocket。使用 tls 上的 websocket 时，您不应再设置 over-tls 和 tls-host 选项，而是设置 obfs=wss 和 obfs-host 选项。
;trojan=example.com:443, password=pwd, over-tls=true, tls-verification=true, fast-open=false, udp-relay=false, tag=trojan-tls-01
;trojan=example.com:443, password=pwd, over-tls=true, tls-verification=true, tls13=true, fast-open=false, udp-relay=false, tag=trojan-tls-02
;trojan=192.168.1.1:443, password=pwd, over-tls=true, tls-host=example.com, tls-verification=true, fast-open=false, udp-relay=false, tag=trojan-tls-03
;trojan=192.168.1.1:443, password=pwd, over-tls=true, tls-host=example.com, tls-verification=true, tls13=true, fast-open=false, udp-relay=false, tag=trojan-tls-04
;trojan=192.168.1.1:443, password=pwd, over-tls=true, tls-host=example.com, tls-verification=true, tls-cert-sha256=b0088370d6c8e02d6e38c443abf81be2aaf1e18f00435aaf0b39852c338f7aaa, tls13=true, fast-open=false, udp-relay=false, tag=trojan-tls-05
;trojan=192.168.1.1:443, password=pwd, over-tls=true, tls-host=example.com, tls-verification=true, tls-pubkey-sha256=eb5ec6684564fd0d04975903ed75342d1b9fdc2096ea54b4cf8caf4740f4ae25, tls13=true, fast-open=false, udp-relay=false, tag=trojan-tls-06
;trojan=192.168.1.1:443, password=pwd, over-tls=true, tls-host=example.com, tls-verification=true, tls-pubkey-sha256=eb5ec6684564fd0d04975903ed75342d1b9fdc2096ea54b4cf8caf4740f4ae25, tls-alpn=02683208687474702f312e31, tls13=true, fast-open=false, udp-relay=false, tag=trojan-tls-07
;trojan=192.168.1.1:443, password=pwd, obfs=wss, obfs-host=example.com, obfs-uri=/path, udp-relay=true, tag=trojan-wss-05

[filter_local] # 本地过滤器
;user-agent, ?abc*, proxy
;host, www.google.com, proxy
;host-keyword, adsite, reject
;host-wildcard, *.goo?le.com, proxy
;host-suffix, googleapis.com, proxy
;host-suffix, googleapis.com, proxy, force-cellular
;host-suffix, googleapis.com, proxy, multi-interface
;host-suffix, googleapis.com, proxy, multi-interface-balance
;host-suffix, googleapis.com, proxy, via-interface=pdp_ip0
;ip6-cidr, 2001:4860:4860::8888/32, direct
;ip-cidr, 10.0.0.0/8, direct
;ip-cidr, 127.0.0.0/8, direct
;ip-cidr, 172.16.0.0/12, direct
;ip-cidr, 192.168.0.0/16, direct
;ip-cidr, 224.0.0.0/24, direct
;geoip, cn, direct
;geoip, cn, direct, force-cellular
;ip-asn, 6185, proxy
# 您可以添加以下主机关键字规则，以跳过所有未匹配主机的 DNS 查询。纯 IP 请求不会被主机相关规则匹配。
;host-keyword, ., proxy
final, proxy


#
# “reject” 返回 HTTP 状态代码 404，没有内容。这种重写类型具有某种动态延迟（0~5 秒）机制，用于在短时间内响应重复请求。重复次数越少，延迟越短（0）。重复次数越多，延迟越大（5）。
# “reject-200” 返回 HTTP 状态代码 200，没有内容。
# “reject-img” 返回 HTTP 状态代码 200，内容为 1px gif。
# “reject-dict” 返回 HTTP 状态代码 200，内容为空 json 对象。
# “reject-array” 返回 HTTP 状态代码 200，内容为空 json 数组。
# “request-header” 适用于所有 http 标头，而不仅仅是一个标头，因此您可以在一个正则表达式中匹配两个或多个标头（包括 CRLF）。
# “echo-r​​esponse” 仅回复匹配 URL 的内容类型响应的正文，正文文件应保存在“On My iPhone - Quantumult X - Data”。
# 如果“重写”与正文相关，则 Quantumult 将自动处理与长度和编码相关的 HTTP 标头字段，因此您不应自行处理它们。对于 script-response-body，支持的最大原始响应正文大小为 4 MB（iOS 13+）。
# 如果正文为空，则不会执行与正文相关的重写。
# 在重写中使用 javascript 时，您可以使用这些对象：$request、$response、$notify(title、subtitle、message)、console.log(message) 和 Quantumult 的内置对象都带有前缀“$”。
# 支持：$request.sessionIndex、$request.scheme、$request.method、$request.url、$request.path、$request.headers、$response.sessionIndex、$response.statusCode、$response.headers、$response.body
# 当响应与请求相关时，$request.sessionIndex 等于 $response.sessionIndex。sessionIndex 与橙色“活动”面板中的 TCP 记录索引无关。
# 如果已启用 Quantumult 通知，则 $notify(title、subtitle、message) 将发布 iOS 通知。
# $prefs 用于持久存储：$prefs.valueForKey(key)、$prefs.setValueForKey(value、key)、$prefs.removeValueForKey(key)、$prefs.removeAllValues()。
# console.log(message) 将日志输出到 Quantumult 日志文件。
# setTimeout(function() { }, interval) 将在 interval(ms) 后运行函数。
# script-request-header、script-request-body、script-response-header、script-response-body、script-echo-r​​esponse 和 script-analyze-echo-r​​esponse 的脚本应保存在本地“On My iPhone - Quantumult X - Scripts”或“iCloud Drive - Quantumult X - Scripts”中。示例可在 https://github.com/crossutility/Quantumult-X 找到
# script-analyze-echo-r​​esponse 和 script-echo-r​​esponse 之间的区别在于前者将等待请求主体。
#
# 如果 URL 和标头都与 url-and-header 重写匹配，则将匹配 HTTP(HTTPS) 请求（将首先评估 URL，如果不匹配，则根本不会评估标头）。要比较的标头的字符串包含方法、路径和键值标头。
#
[rewrite_local] # 本地重写规则
;^http://example\.com/resource1/1/ url reject
;^http://example\.com/resource1/2/ url reject-img
;^http://example\.com/resource1/3/ url reject-200
;^http://example\.com/resource1/4/ url reject-dict
;^http://example\.com/resource1/5/ url reject-array
;^http://example\.com/resource2/ url 302 http://example.com/new-resource2/
;^http://example\.com/resource3/ url 307 http://example.com/new-resource3/
;^http://example\.com/resource4/ url request-header ^GET /resource4/ HTTP/1\.1(\r\n) request-header GET /api/ HTTP/1.1$1
;^http://example\.com/resource4/ url request-header (\r\n)User-Agent:.+(\r\n) request-header $1User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36$2
;^http://example\.com/resource5/ url request-body "info":\[.+\],"others" request-body "info":[],"others"
;^http://example\.com/resource5/ url response-body "info":\[.+\],"others" response-body "info":[],"others"
;^http://example\.com/resource5/ url echo-response text/html echo-response index.html
;^http://example\.com/resource6/ url script-response-body response-body.js
;^http://example\.com/resource7/ url script-echo-response script-echo.js
;^http://example\.com/resource8/ url script-response-header response-header.js
;^http://example\.com/resource9/ url script-request-header request-header.js
;^http://example\.com/resource10/ url script-request-body request-body.js
;^http://example\.com/resource1/1/ \r\nUser-Agent: example-agent url-and-header reject
;^http://example\.com/resource1/1/ ^POST url-and-header reject


#
# 如果设置了 require-devices，则仅当当前 Quantumult 设备 ID 属于 require-devices 时才会加载此配置行。Quantumult 设备 ID 可在“设置 - 其他设置 - 关于”中找到。
# $task.fetch() 组成 HTTP 请求并处理响应，仅支持文本主体。如果您想要串行请求而不是当前请求，则可以将 $task.fetch() 嵌入另一个 $task.fetch() 的完成处理程序中。
# 脚本应保存在本地“在我的 iPhone 上 - Quantumult X - 脚本”或“iCloud Drive - Quantumult X - 脚本”中。示例可在 https://github.com/crossutility/Quantumult-X/blob/master/sample-task.js 找到
# 默认 HTTP 请求超时为 10 秒。
#
# 支持 5 或 6 个 cron 字段（不包括命令字段）。当网络发生变化时，将触发事件网络。当用户点击 UIAction 时，将触发事件交互。只有当 Quantumult X Tunnel 运行时，才能触发事件相关任务。
#
[task_local] # 本地任务
;* * * * * sample-task.js
;* * * * * sample-task2.js, img-url=https://raw.githubusercontent.com/crossutility/Quantumult-X/master/quantumult-x.png, tag=Sample, enabled=true
;* * * * * sample-task3.js, img-url=https://raw.githubusercontent.com/crossutility/Quantumult-X/master/quantumult-x.png, tag=Sample, require-devices=ID1, ID2, enabled=true
;event-network sample-task3.js
;event-interaction sample-task4.js
#
# 和任何 Web 浏览器一样，# 后面的 http(s) url 字符串永远不会发送到服务器。您可以在脚本 http(s) url 中添加 # 以附加自定义参数，并使用 API $environment.sourcePath 获取整个路径（https://example.com/sample.js#this-is-not-sent-to-server&key1=value1&key2=value2）并自行提取脚本中的自定义参数。
#
;* * * * * https://example.com/sample.js#this-is-not-sent-to-server&key1=value1&key2=value2, tag=Sample, enabled=true


#
# 部署本地 HTTP 服务器并使用 JavaScript 进行数据处理。
# 如果设置了 require-devices，则仅当当前 Quantumult 设备 ID 属于 require-devices 时才会加载此配置行。Quantumult 设备 ID 可在“设置 - 其他设置 - 关于”中找到。
# 输入变量为 $reqeust.url、$reqeust.path、$reqeust.headers、$reqeust.body
# 输出使用 $done（如 $done({status:"HTTP/1.1 200 OK"}, headers:{}, body:"here is a string")）来发回响应。
# 此外，您还可以使用签名或任何其他验证方法来验证请求是否合法。
# 部署后，您应该通过 http://127.0.0.1:9999/your-path/your-api/ 访问它。
#
[http_backend] # 本地 HTTP 后端
;https://raw.githubusercontent.com/crossutility/Quantumult-X/master/sample-backend.js, tag=fileConverter, path=^/example/v1/
;preference.js, tag=userPreference, path=^/preference/v1/, img-url=https://example.com, enabled=true
;sample.js, tag=sample, path=^/sample/v1/, require-devices=ID1, ID2, enabled=true
;convert.js, tag=fileConverter, path=^/convert/v1/


#
# 如果 TCP 连接的源 IP 与 skip_src_ip 匹配，则不会评估主机名。支持通配符 * 和 ?。
# 如果 TCP 连接的目标 IP 与 skip_dst_ip 匹配，则不会评估主机名。支持通配符 * 和 ?。
# 只有“主机名”中的 TLS SNI 或目标地址才会由 MitM 处理。支持通配符 * 和 ?。
#
# 重要！！！您应该始终将 CA 密码和 p12 保密。
#
[mitm] # 中间人代理
;passphrase = # CA 密钥
;p12 = # CA 证书
;skip_validating_cert = false
;skip_src_ip = 192.168.1.5, 192.168.1.6
;skip_dst_ip = 17.0.0.1
;hostname = *.example.com, *.sample.com, non-existed-domain.com, *.non-connected-domain.com  # 主机名
